// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: project_node.proto

package project_node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectNodeServiceClient is the client API for ProjectNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectNodeServiceClient interface {
	GetProjectNodeList(ctx context.Context, in *GetProjectNodeListReq, opts ...grpc.CallOption) (*GetProjectNodeListResp, error)
}

type projectNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectNodeServiceClient(cc grpc.ClientConnInterface) ProjectNodeServiceClient {
	return &projectNodeServiceClient{cc}
}

func (c *projectNodeServiceClient) GetProjectNodeList(ctx context.Context, in *GetProjectNodeListReq, opts ...grpc.CallOption) (*GetProjectNodeListResp, error) {
	out := new(GetProjectNodeListResp)
	err := c.cc.Invoke(ctx, "/project_node.service.v1.ProjectNodeService/GetProjectNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectNodeServiceServer is the server API for ProjectNodeService service.
// All implementations must embed UnimplementedProjectNodeServiceServer
// for forward compatibility
type ProjectNodeServiceServer interface {
	GetProjectNodeList(context.Context, *GetProjectNodeListReq) (*GetProjectNodeListResp, error)
	mustEmbedUnimplementedProjectNodeServiceServer()
}

// UnimplementedProjectNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectNodeServiceServer struct {
}

func (UnimplementedProjectNodeServiceServer) GetProjectNodeList(context.Context, *GetProjectNodeListReq) (*GetProjectNodeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectNodeList not implemented")
}
func (UnimplementedProjectNodeServiceServer) mustEmbedUnimplementedProjectNodeServiceServer() {}

// UnsafeProjectNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectNodeServiceServer will
// result in compilation errors.
type UnsafeProjectNodeServiceServer interface {
	mustEmbedUnimplementedProjectNodeServiceServer()
}

func RegisterProjectNodeServiceServer(s grpc.ServiceRegistrar, srv ProjectNodeServiceServer) {
	s.RegisterService(&ProjectNodeService_ServiceDesc, srv)
}

func _ProjectNodeService_GetProjectNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectNodeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectNodeServiceServer).GetProjectNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project_node.service.v1.ProjectNodeService/GetProjectNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectNodeServiceServer).GetProjectNodeList(ctx, req.(*GetProjectNodeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectNodeService_ServiceDesc is the grpc.ServiceDesc for ProjectNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project_node.service.v1.ProjectNodeService",
	HandlerType: (*ProjectNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectNodeList",
			Handler:    _ProjectNodeService_GetProjectNodeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project_node.proto",
}
