// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: task_service.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetTaskStages(ctx context.Context, in *GetTaskStagesReq, opts ...grpc.CallOption) (*GetTaskStagesResp, error)
	GetTasksByStageCode(ctx context.Context, in *GetTasksByStageCodeReq, opts ...grpc.CallOption) (*GetTasksByStageCodeResp, error)
	SaveTask(ctx context.Context, in *SaveTaskReq, opts ...grpc.CallOption) (*SaveTaskResp, error)
	MoveTask(ctx context.Context, in *MoveTaskReq, opts ...grpc.CallOption) (*MoveTaskResp, error)
	GetTaskList(ctx context.Context, in *GetTaskListReq, opts ...grpc.CallOption) (*GetTaskListResp, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTaskStages(ctx context.Context, in *GetTaskStagesReq, opts ...grpc.CallOption) (*GetTaskStagesResp, error) {
	out := new(GetTaskStagesResp)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTaskStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTasksByStageCode(ctx context.Context, in *GetTasksByStageCodeReq, opts ...grpc.CallOption) (*GetTasksByStageCodeResp, error) {
	out := new(GetTasksByStageCodeResp)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTasksByStageCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTask(ctx context.Context, in *SaveTaskReq, opts ...grpc.CallOption) (*SaveTaskResp, error) {
	out := new(SaveTaskResp)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/SaveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MoveTask(ctx context.Context, in *MoveTaskReq, opts ...grpc.CallOption) (*MoveTaskResp, error) {
	out := new(MoveTaskResp)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/MoveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskList(ctx context.Context, in *GetTaskListReq, opts ...grpc.CallOption) (*GetTaskListResp, error) {
	out := new(GetTaskListResp)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	GetTaskStages(context.Context, *GetTaskStagesReq) (*GetTaskStagesResp, error)
	GetTasksByStageCode(context.Context, *GetTasksByStageCodeReq) (*GetTasksByStageCodeResp, error)
	SaveTask(context.Context, *SaveTaskReq) (*SaveTaskResp, error)
	MoveTask(context.Context, *MoveTaskReq) (*MoveTaskResp, error)
	GetTaskList(context.Context, *GetTaskListReq) (*GetTaskListResp, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) GetTaskStages(context.Context, *GetTaskStagesReq) (*GetTaskStagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStages not implemented")
}
func (UnimplementedTaskServiceServer) GetTasksByStageCode(context.Context, *GetTasksByStageCodeReq) (*GetTasksByStageCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByStageCode not implemented")
}
func (UnimplementedTaskServiceServer) SaveTask(context.Context, *SaveTaskReq) (*SaveTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (UnimplementedTaskServiceServer) MoveTask(context.Context, *MoveTaskReq) (*MoveTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskList(context.Context, *GetTaskListReq) (*GetTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_GetTaskStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTaskStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskStages(ctx, req.(*GetTaskStagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTasksByStageCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByStageCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasksByStageCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTasksByStageCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasksByStageCode(ctx, req.(*GetTasksByStageCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/SaveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTask(ctx, req.(*SaveTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MoveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/MoveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MoveTask(ctx, req.(*MoveTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskList(ctx, req.(*GetTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.service.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskStages",
			Handler:    _TaskService_GetTaskStages_Handler,
		},
		{
			MethodName: "GetTasksByStageCode",
			Handler:    _TaskService_GetTasksByStageCode_Handler,
		},
		{
			MethodName: "SaveTask",
			Handler:    _TaskService_SaveTask_Handler,
		},
		{
			MethodName: "MoveTask",
			Handler:    _TaskService_MoveTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _TaskService_GetTaskList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_service.proto",
}
