// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: task_service.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTaskStagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	PageSize    int32  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Page        int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetTaskStagesReq) Reset() {
	*x = GetTaskStagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskStagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStagesReq) ProtoMessage() {}

func (x *GetTaskStagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStagesReq.ProtoReflect.Descriptor instead.
func (*GetTaskStagesReq) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTaskStagesReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetTaskStagesReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTaskStagesReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type TaskStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectCode   string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Sort          int32  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Description   string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	CreateTimeStr string `protobuf:"bytes,6,opt,name=createTimeStr,proto3" json:"createTimeStr,omitempty"`
	Deleted       int32  `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Code          string `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *TaskStage) Reset() {
	*x = TaskStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStage) ProtoMessage() {}

func (x *TaskStage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStage.ProtoReflect.Descriptor instead.
func (*TaskStage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskStage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskStage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TaskStage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskStage) GetCreateTimeStr() string {
	if x != nil {
		return x.CreateTimeStr
	}
	return ""
}

func (x *TaskStage) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TaskStage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetTaskStagesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TaskStage `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetTaskStagesResp) Reset() {
	*x = GetTaskStagesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskStagesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStagesResp) ProtoMessage() {}

func (x *GetTaskStagesResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStagesResp.ProtoReflect.Descriptor instead.
func (*GetTaskStagesResp) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTaskStagesResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetTaskStagesResp) GetList() []*TaskStage {
	if x != nil {
		return x.List
	}
	return nil
}

type GetTasksByStageCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId  int64  `protobuf:"varint,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	StageCode string `protobuf:"bytes,2,opt,name=stageCode,proto3" json:"stageCode,omitempty"`
}

func (x *GetTasksByStageCodeReq) Reset() {
	*x = GetTasksByStageCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksByStageCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksByStageCodeReq) ProtoMessage() {}

func (x *GetTasksByStageCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksByStageCodeReq.ProtoReflect.Descriptor instead.
func (*GetTasksByStageCodeReq) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTasksByStageCodeReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *GetTasksByStageCodeReq) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectCode   string           `protobuf:"bytes,2,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Name          string           `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Pri           int32            `protobuf:"varint,4,opt,name=Pri,proto3" json:"Pri,omitempty"`
	ExecuteStatus string           `protobuf:"bytes,5,opt,name=ExecuteStatus,proto3" json:"ExecuteStatus,omitempty"`
	Description   string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	CreateBy      string           `protobuf:"bytes,7,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	DoneBy        string           `protobuf:"bytes,8,opt,name=DoneBy,proto3" json:"DoneBy,omitempty"`
	DoneTime      string           `protobuf:"bytes,9,opt,name=DoneTime,proto3" json:"DoneTime,omitempty"`
	CreateTime    string           `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	AssignTo      string           `protobuf:"bytes,11,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
	Deleted       int32            `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	StageCode     string           `protobuf:"bytes,13,opt,name=StageCode,proto3" json:"StageCode,omitempty"`
	TaskTag       string           `protobuf:"bytes,14,opt,name=TaskTag,proto3" json:"TaskTag,omitempty"`
	Done          int32            `protobuf:"varint,15,opt,name=Done,proto3" json:"Done,omitempty"`
	BeginTime     string           `protobuf:"bytes,16,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime       string           `protobuf:"bytes,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RemindTime    string           `protobuf:"bytes,18,opt,name=RemindTime,proto3" json:"RemindTime,omitempty"`
	Pcode         string           `protobuf:"bytes,19,opt,name=Pcode,proto3" json:"Pcode,omitempty"`
	Sort          int32            `protobuf:"varint,20,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Like          int32            `protobuf:"varint,21,opt,name=Like,proto3" json:"Like,omitempty"`
	Star          int32            `protobuf:"varint,22,opt,name=Star,proto3" json:"Star,omitempty"`
	DeletedTime   string           `protobuf:"bytes,23,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Private       int32            `protobuf:"varint,24,opt,name=Private,proto3" json:"Private,omitempty"`
	IdNum         int32            `protobuf:"varint,25,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	Path          string           `protobuf:"bytes,26,opt,name=Path,proto3" json:"Path,omitempty"`
	Schedule      int32            `protobuf:"varint,27,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	VersionCode   string           `protobuf:"bytes,28,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	FeaturesCode  string           `protobuf:"bytes,29,opt,name=FeaturesCode,proto3" json:"FeaturesCode,omitempty"`
	WorkTime      int32            `protobuf:"varint,30,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	Status        int32            `protobuf:"varint,31,opt,name=Status,proto3" json:"Status,omitempty"`
	Code          string           `protobuf:"bytes,32,opt,name=code,proto3" json:"code,omitempty"`
	CanRead       int32            `protobuf:"varint,33,opt,name=canRead,proto3" json:"canRead,omitempty"`
	Executor      *ExecutorMessage `protobuf:"bytes,34,opt,name=executor,proto3" json:"executor,omitempty"`
	ProjectName   string           `protobuf:"bytes,35,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *Task) GetExecuteStatus() string {
	if x != nil {
		return x.ExecuteStatus
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Task) GetDoneBy() string {
	if x != nil {
		return x.DoneBy
	}
	return ""
}

func (x *Task) GetDoneTime() string {
	if x != nil {
		return x.DoneTime
	}
	return ""
}

func (x *Task) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Task) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *Task) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *Task) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *Task) GetTaskTag() string {
	if x != nil {
		return x.TaskTag
	}
	return ""
}

func (x *Task) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *Task) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *Task) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Task) GetRemindTime() string {
	if x != nil {
		return x.RemindTime
	}
	return ""
}

func (x *Task) GetPcode() string {
	if x != nil {
		return x.Pcode
	}
	return ""
}

func (x *Task) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Task) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *Task) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *Task) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *Task) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *Task) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *Task) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Task) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *Task) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *Task) GetFeaturesCode() string {
	if x != nil {
		return x.FeaturesCode
	}
	return ""
}

func (x *Task) GetWorkTime() int32 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *Task) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Task) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Task) GetCanRead() int32 {
	if x != nil {
		return x.CanRead
	}
	return 0
}

func (x *Task) GetExecutor() *ExecutorMessage {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *Task) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ExecutorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar string `protobuf:"bytes,2,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecutorMessage) Reset() {
	*x = ExecutorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorMessage) ProtoMessage() {}

func (x *ExecutorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorMessage.ProtoReflect.Descriptor instead.
func (*ExecutorMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{5}
}

func (x *ExecutorMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutorMessage) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ExecutorMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetTasksByStageCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Task `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetTasksByStageCodeResp) Reset() {
	*x = GetTasksByStageCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksByStageCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksByStageCodeResp) ProtoMessage() {}

func (x *GetTasksByStageCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksByStageCodeResp.ProtoReflect.Descriptor instead.
func (*GetTasksByStageCodeResp) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetTasksByStageCodeResp) GetList() []*Task {
	if x != nil {
		return x.List
	}
	return nil
}

type SaveTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId    int64  `protobuf:"varint,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StageCode   string `protobuf:"bytes,3,opt,name=stageCode,proto3" json:"stageCode,omitempty"`
	ProjectCode string `protobuf:"bytes,4,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	AssignTo    string `protobuf:"bytes,5,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
}

func (x *SaveTaskReq) Reset() {
	*x = SaveTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTaskReq) ProtoMessage() {}

func (x *SaveTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTaskReq.ProtoReflect.Descriptor instead.
func (*SaveTaskReq) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{7}
}

func (x *SaveTaskReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *SaveTaskReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaveTaskReq) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *SaveTaskReq) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *SaveTaskReq) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

type SaveTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectCode   string           `protobuf:"bytes,2,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Name          string           `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Pri           int32            `protobuf:"varint,4,opt,name=Pri,proto3" json:"Pri,omitempty"`
	ExecuteStatus string           `protobuf:"bytes,5,opt,name=ExecuteStatus,proto3" json:"ExecuteStatus,omitempty"`
	Description   string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	CreateBy      string           `protobuf:"bytes,7,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	DoneBy        string           `protobuf:"bytes,8,opt,name=DoneBy,proto3" json:"DoneBy,omitempty"`
	DoneTime      string           `protobuf:"bytes,9,opt,name=DoneTime,proto3" json:"DoneTime,omitempty"`
	CreateTime    string           `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	AssignTo      string           `protobuf:"bytes,11,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
	Deleted       int32            `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	StageCode     string           `protobuf:"bytes,13,opt,name=StageCode,proto3" json:"StageCode,omitempty"`
	TaskTag       string           `protobuf:"bytes,14,opt,name=TaskTag,proto3" json:"TaskTag,omitempty"`
	Done          int32            `protobuf:"varint,15,opt,name=Done,proto3" json:"Done,omitempty"`
	BeginTime     string           `protobuf:"bytes,16,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime       string           `protobuf:"bytes,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RemindTime    string           `protobuf:"bytes,18,opt,name=RemindTime,proto3" json:"RemindTime,omitempty"`
	Pcode         string           `protobuf:"bytes,19,opt,name=Pcode,proto3" json:"Pcode,omitempty"`
	Sort          int32            `protobuf:"varint,20,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Like          int32            `protobuf:"varint,21,opt,name=Like,proto3" json:"Like,omitempty"`
	Star          int32            `protobuf:"varint,22,opt,name=Star,proto3" json:"Star,omitempty"`
	DeletedTime   string           `protobuf:"bytes,23,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Private       int32            `protobuf:"varint,24,opt,name=Private,proto3" json:"Private,omitempty"`
	IdNum         int32            `protobuf:"varint,25,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	Path          string           `protobuf:"bytes,26,opt,name=Path,proto3" json:"Path,omitempty"`
	Schedule      int32            `protobuf:"varint,27,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	VersionCode   string           `protobuf:"bytes,28,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	FeaturesCode  string           `protobuf:"bytes,29,opt,name=FeaturesCode,proto3" json:"FeaturesCode,omitempty"`
	WorkTime      int32            `protobuf:"varint,30,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	Status        int32            `protobuf:"varint,31,opt,name=Status,proto3" json:"Status,omitempty"`
	Code          string           `protobuf:"bytes,32,opt,name=code,proto3" json:"code,omitempty"`
	CanRead       int32            `protobuf:"varint,33,opt,name=canRead,proto3" json:"canRead,omitempty"`
	Executor      *ExecutorMessage `protobuf:"bytes,34,opt,name=executor,proto3" json:"executor,omitempty"`
	ProjectName   string           `protobuf:"bytes,35,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *SaveTaskResp) Reset() {
	*x = SaveTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTaskResp) ProtoMessage() {}

func (x *SaveTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTaskResp.ProtoReflect.Descriptor instead.
func (*SaveTaskResp) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{8}
}

func (x *SaveTaskResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaveTaskResp) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *SaveTaskResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaveTaskResp) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *SaveTaskResp) GetExecuteStatus() string {
	if x != nil {
		return x.ExecuteStatus
	}
	return ""
}

func (x *SaveTaskResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SaveTaskResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SaveTaskResp) GetDoneBy() string {
	if x != nil {
		return x.DoneBy
	}
	return ""
}

func (x *SaveTaskResp) GetDoneTime() string {
	if x != nil {
		return x.DoneTime
	}
	return ""
}

func (x *SaveTaskResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SaveTaskResp) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *SaveTaskResp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *SaveTaskResp) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *SaveTaskResp) GetTaskTag() string {
	if x != nil {
		return x.TaskTag
	}
	return ""
}

func (x *SaveTaskResp) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *SaveTaskResp) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *SaveTaskResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SaveTaskResp) GetRemindTime() string {
	if x != nil {
		return x.RemindTime
	}
	return ""
}

func (x *SaveTaskResp) GetPcode() string {
	if x != nil {
		return x.Pcode
	}
	return ""
}

func (x *SaveTaskResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SaveTaskResp) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *SaveTaskResp) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *SaveTaskResp) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *SaveTaskResp) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *SaveTaskResp) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *SaveTaskResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SaveTaskResp) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *SaveTaskResp) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *SaveTaskResp) GetFeaturesCode() string {
	if x != nil {
		return x.FeaturesCode
	}
	return ""
}

func (x *SaveTaskResp) GetWorkTime() int32 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *SaveTaskResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SaveTaskResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SaveTaskResp) GetCanRead() int32 {
	if x != nil {
		return x.CanRead
	}
	return 0
}

func (x *SaveTaskResp) GetExecutor() *ExecutorMessage {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *SaveTaskResp) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type MoveTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginTaskCode  string `protobuf:"bytes,1,opt,name=originTaskCode,proto3" json:"originTaskCode,omitempty"`
	TargetTaskCode  string `protobuf:"bytes,2,opt,name=targetTaskCode,proto3" json:"targetTaskCode,omitempty"`
	TargetStageCode string `protobuf:"bytes,3,opt,name=targetStageCode,proto3" json:"targetStageCode,omitempty"`
}

func (x *MoveTaskReq) Reset() {
	*x = MoveTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTaskReq) ProtoMessage() {}

func (x *MoveTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTaskReq.ProtoReflect.Descriptor instead.
func (*MoveTaskReq) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{9}
}

func (x *MoveTaskReq) GetOriginTaskCode() string {
	if x != nil {
		return x.OriginTaskCode
	}
	return ""
}

func (x *MoveTaskReq) GetTargetTaskCode() string {
	if x != nil {
		return x.TargetTaskCode
	}
	return ""
}

func (x *MoveTaskReq) GetTargetStageCode() string {
	if x != nil {
		return x.TargetStageCode
	}
	return ""
}

type MoveTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveTaskResp) Reset() {
	*x = MoveTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTaskResp) ProtoMessage() {}

func (x *MoveTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTaskResp.ProtoReflect.Descriptor instead.
func (*MoveTaskResp) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{10}
}

type GetTaskListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId int64 `protobuf:"varint,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	TaskType int32 `protobuf:"varint,2,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Done     int32 `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
	Page     int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetTaskListReq) Reset() {
	*x = GetTaskListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskListReq) ProtoMessage() {}

func (x *GetTaskListReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskListReq.ProtoReflect.Descriptor instead.
func (*GetTaskListReq) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetTaskListReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *GetTaskListReq) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *GetTaskListReq) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *GetTaskListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTaskListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectCode        string           `protobuf:"bytes,2,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Name               string           `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Pri                int32            `protobuf:"varint,4,opt,name=Pri,proto3" json:"Pri,omitempty"`
	ExecuteStatus      string           `protobuf:"bytes,5,opt,name=ExecuteStatus,proto3" json:"ExecuteStatus,omitempty"`
	Description        string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	CreateBy           string           `protobuf:"bytes,7,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	DoneBy             string           `protobuf:"bytes,8,opt,name=DoneBy,proto3" json:"DoneBy,omitempty"`
	DoneTime           string           `protobuf:"bytes,9,opt,name=DoneTime,proto3" json:"DoneTime,omitempty"`
	CreateTime         string           `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	AssignTo           string           `protobuf:"bytes,11,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
	Deleted            int32            `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	StageCode          string           `protobuf:"bytes,13,opt,name=StageCode,proto3" json:"StageCode,omitempty"`
	TaskTag            string           `protobuf:"bytes,14,opt,name=TaskTag,proto3" json:"TaskTag,omitempty"`
	Done               int32            `protobuf:"varint,15,opt,name=Done,proto3" json:"Done,omitempty"`
	BeginTime          string           `protobuf:"bytes,16,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime            string           `protobuf:"bytes,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RemindTime         string           `protobuf:"bytes,18,opt,name=RemindTime,proto3" json:"RemindTime,omitempty"`
	Pcode              string           `protobuf:"bytes,19,opt,name=Pcode,proto3" json:"Pcode,omitempty"`
	Sort               int32            `protobuf:"varint,20,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Like               int32            `protobuf:"varint,21,opt,name=Like,proto3" json:"Like,omitempty"`
	Star               int32            `protobuf:"varint,22,opt,name=Star,proto3" json:"Star,omitempty"`
	DeletedTime        string           `protobuf:"bytes,23,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Private            int32            `protobuf:"varint,24,opt,name=Private,proto3" json:"Private,omitempty"`
	IdNum              int32            `protobuf:"varint,25,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	Path               string           `protobuf:"bytes,26,opt,name=Path,proto3" json:"Path,omitempty"`
	Schedule           int32            `protobuf:"varint,27,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	VersionCode        string           `protobuf:"bytes,28,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	FeaturesCode       string           `protobuf:"bytes,29,opt,name=FeaturesCode,proto3" json:"FeaturesCode,omitempty"`
	WorkTime           int32            `protobuf:"varint,30,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	Status             int32            `protobuf:"varint,31,opt,name=Status,proto3" json:"Status,omitempty"`
	Code               string           `protobuf:"bytes,32,opt,name=code,proto3" json:"code,omitempty"`
	Cover              string           `protobuf:"bytes,33,opt,name=Cover,proto3" json:"Cover,omitempty"`
	AccessControlType  string           `protobuf:"bytes,34,opt,name=AccessControlType,proto3" json:"AccessControlType,omitempty"`
	WhiteList          string           `protobuf:"bytes,35,opt,name=WhiteList,proto3" json:"WhiteList,omitempty"`
	Order              int32            `protobuf:"varint,36,opt,name=Order,proto3" json:"Order,omitempty"`
	TemplateCode       string           `protobuf:"bytes,37,opt,name=TemplateCode,proto3" json:"TemplateCode,omitempty"`
	OrganizationCode   string           `protobuf:"bytes,38,opt,name=OrganizationCode,proto3" json:"OrganizationCode,omitempty"`
	Prefix             string           `protobuf:"bytes,39,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	OpenPrefix         int32            `protobuf:"varint,40,opt,name=OpenPrefix,proto3" json:"OpenPrefix,omitempty"`
	Archive            int32            `protobuf:"varint,41,opt,name=Archive,proto3" json:"Archive,omitempty"`
	ArchiveTime        int64            `protobuf:"varint,42,opt,name=ArchiveTime,proto3" json:"ArchiveTime,omitempty"`
	OpenBeginTime      int32            `protobuf:"varint,43,opt,name=OpenBeginTime,proto3" json:"OpenBeginTime,omitempty"`
	OpenTaskPrivate    int32            `protobuf:"varint,44,opt,name=OpenTaskPrivate,proto3" json:"OpenTaskPrivate,omitempty"`
	TaskBoardTheme     string           `protobuf:"bytes,45,opt,name=TaskBoardTheme,proto3" json:"TaskBoardTheme,omitempty"`
	AutoUpdateSchedule int32            `protobuf:"varint,46,opt,name=AutoUpdateSchedule,proto3" json:"AutoUpdateSchedule,omitempty"`
	Executor           *ExecutorMessage `protobuf:"bytes,47,opt,name=executor,proto3" json:"executor,omitempty"`
	ProjectName        string           `protobuf:"bytes,48,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *TaskMessage) Reset() {
	*x = TaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMessage) ProtoMessage() {}

func (x *TaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMessage.ProtoReflect.Descriptor instead.
func (*TaskMessage) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{12}
}

func (x *TaskMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskMessage) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TaskMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMessage) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *TaskMessage) GetExecuteStatus() string {
	if x != nil {
		return x.ExecuteStatus
	}
	return ""
}

func (x *TaskMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskMessage) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TaskMessage) GetDoneBy() string {
	if x != nil {
		return x.DoneBy
	}
	return ""
}

func (x *TaskMessage) GetDoneTime() string {
	if x != nil {
		return x.DoneTime
	}
	return ""
}

func (x *TaskMessage) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskMessage) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *TaskMessage) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TaskMessage) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *TaskMessage) GetTaskTag() string {
	if x != nil {
		return x.TaskTag
	}
	return ""
}

func (x *TaskMessage) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *TaskMessage) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *TaskMessage) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TaskMessage) GetRemindTime() string {
	if x != nil {
		return x.RemindTime
	}
	return ""
}

func (x *TaskMessage) GetPcode() string {
	if x != nil {
		return x.Pcode
	}
	return ""
}

func (x *TaskMessage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TaskMessage) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *TaskMessage) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *TaskMessage) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *TaskMessage) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *TaskMessage) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *TaskMessage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TaskMessage) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *TaskMessage) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *TaskMessage) GetFeaturesCode() string {
	if x != nil {
		return x.FeaturesCode
	}
	return ""
}

func (x *TaskMessage) GetWorkTime() int32 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *TaskMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaskMessage) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *TaskMessage) GetAccessControlType() string {
	if x != nil {
		return x.AccessControlType
	}
	return ""
}

func (x *TaskMessage) GetWhiteList() string {
	if x != nil {
		return x.WhiteList
	}
	return ""
}

func (x *TaskMessage) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TaskMessage) GetTemplateCode() string {
	if x != nil {
		return x.TemplateCode
	}
	return ""
}

func (x *TaskMessage) GetOrganizationCode() string {
	if x != nil {
		return x.OrganizationCode
	}
	return ""
}

func (x *TaskMessage) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *TaskMessage) GetOpenPrefix() int32 {
	if x != nil {
		return x.OpenPrefix
	}
	return 0
}

func (x *TaskMessage) GetArchive() int32 {
	if x != nil {
		return x.Archive
	}
	return 0
}

func (x *TaskMessage) GetArchiveTime() int64 {
	if x != nil {
		return x.ArchiveTime
	}
	return 0
}

func (x *TaskMessage) GetOpenBeginTime() int32 {
	if x != nil {
		return x.OpenBeginTime
	}
	return 0
}

func (x *TaskMessage) GetOpenTaskPrivate() int32 {
	if x != nil {
		return x.OpenTaskPrivate
	}
	return 0
}

func (x *TaskMessage) GetTaskBoardTheme() string {
	if x != nil {
		return x.TaskBoardTheme
	}
	return ""
}

func (x *TaskMessage) GetAutoUpdateSchedule() int32 {
	if x != nil {
		return x.AutoUpdateSchedule
	}
	return 0
}

func (x *TaskMessage) GetExecutor() *ExecutorMessage {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *TaskMessage) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetTaskListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*TaskMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetTaskListResp) Reset() {
	*x = GetTaskListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskListResp) ProtoMessage() {}

func (x *GetTaskListResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskListResp.ProtoReflect.Descriptor instead.
func (*GetTaskListResp) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTaskListResp) GetList() []*TaskMessage {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetTaskListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetTaskDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskCode string `protobuf:"bytes,1,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	MemberId int64  `protobuf:"varint,2,opt,name=memberId,proto3" json:"memberId,omitempty"`
}

func (x *GetTaskDetailReq) Reset() {
	*x = GetTaskDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDetailReq) ProtoMessage() {}

func (x *GetTaskDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDetailReq.ProtoReflect.Descriptor instead.
func (*GetTaskDetailReq) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTaskDetailReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *GetTaskDetailReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type GetTaskDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProjectCode   string           `protobuf:"bytes,2,opt,name=ProjectCode,proto3" json:"ProjectCode,omitempty"`
	Name          string           `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Pri           int32            `protobuf:"varint,4,opt,name=Pri,proto3" json:"Pri,omitempty"`
	ExecuteStatus string           `protobuf:"bytes,5,opt,name=ExecuteStatus,proto3" json:"ExecuteStatus,omitempty"`
	Description   string           `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	CreateBy      string           `protobuf:"bytes,7,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	DoneBy        string           `protobuf:"bytes,8,opt,name=DoneBy,proto3" json:"DoneBy,omitempty"`
	DoneTime      string           `protobuf:"bytes,9,opt,name=DoneTime,proto3" json:"DoneTime,omitempty"`
	CreateTime    string           `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	AssignTo      string           `protobuf:"bytes,11,opt,name=AssignTo,proto3" json:"AssignTo,omitempty"`
	Deleted       int32            `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	StageCode     string           `protobuf:"bytes,13,opt,name=StageCode,proto3" json:"StageCode,omitempty"`
	TaskTag       string           `protobuf:"bytes,14,opt,name=TaskTag,proto3" json:"TaskTag,omitempty"`
	Done          int32            `protobuf:"varint,15,opt,name=Done,proto3" json:"Done,omitempty"`
	BeginTime     string           `protobuf:"bytes,16,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`
	EndTime       string           `protobuf:"bytes,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	RemindTime    string           `protobuf:"bytes,18,opt,name=RemindTime,proto3" json:"RemindTime,omitempty"`
	Pcode         string           `protobuf:"bytes,19,opt,name=Pcode,proto3" json:"Pcode,omitempty"`
	Sort          int32            `protobuf:"varint,20,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Like          int32            `protobuf:"varint,21,opt,name=Like,proto3" json:"Like,omitempty"`
	Star          int32            `protobuf:"varint,22,opt,name=Star,proto3" json:"Star,omitempty"`
	DeletedTime   string           `protobuf:"bytes,23,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Private       int32            `protobuf:"varint,24,opt,name=Private,proto3" json:"Private,omitempty"`
	IdNum         int32            `protobuf:"varint,25,opt,name=IdNum,proto3" json:"IdNum,omitempty"`
	Path          string           `protobuf:"bytes,26,opt,name=Path,proto3" json:"Path,omitempty"`
	Schedule      int32            `protobuf:"varint,27,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	VersionCode   string           `protobuf:"bytes,28,opt,name=VersionCode,proto3" json:"VersionCode,omitempty"`
	FeaturesCode  string           `protobuf:"bytes,29,opt,name=FeaturesCode,proto3" json:"FeaturesCode,omitempty"`
	WorkTime      int32            `protobuf:"varint,30,opt,name=WorkTime,proto3" json:"WorkTime,omitempty"`
	Status        int32            `protobuf:"varint,31,opt,name=Status,proto3" json:"Status,omitempty"`
	Code          string           `protobuf:"bytes,32,opt,name=code,proto3" json:"code,omitempty"`
	CanRead       int32            `protobuf:"varint,33,opt,name=canRead,proto3" json:"canRead,omitempty"`
	Executor      *ExecutorMessage `protobuf:"bytes,34,opt,name=executor,proto3" json:"executor,omitempty"`
	ProjectName   string           `protobuf:"bytes,35,opt,name=projectName,proto3" json:"projectName,omitempty"`
	StageName     string           `protobuf:"bytes,36,opt,name=stageName,proto3" json:"stageName,omitempty"`
	PriText       string           `protobuf:"bytes,37,opt,name=priText,proto3" json:"priText,omitempty"`
	StatusText    string           `protobuf:"bytes,38,opt,name=statusText,proto3" json:"statusText,omitempty"`
}

func (x *GetTaskDetailResp) Reset() {
	*x = GetTaskDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDetailResp) ProtoMessage() {}

func (x *GetTaskDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDetailResp.ProtoReflect.Descriptor instead.
func (*GetTaskDetailResp) Descriptor() ([]byte, []int) {
	return file_task_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetTaskDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTaskDetailResp) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetTaskDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTaskDetailResp) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *GetTaskDetailResp) GetExecuteStatus() string {
	if x != nil {
		return x.ExecuteStatus
	}
	return ""
}

func (x *GetTaskDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetTaskDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *GetTaskDetailResp) GetDoneBy() string {
	if x != nil {
		return x.DoneBy
	}
	return ""
}

func (x *GetTaskDetailResp) GetDoneTime() string {
	if x != nil {
		return x.DoneTime
	}
	return ""
}

func (x *GetTaskDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetTaskDetailResp) GetAssignTo() string {
	if x != nil {
		return x.AssignTo
	}
	return ""
}

func (x *GetTaskDetailResp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *GetTaskDetailResp) GetStageCode() string {
	if x != nil {
		return x.StageCode
	}
	return ""
}

func (x *GetTaskDetailResp) GetTaskTag() string {
	if x != nil {
		return x.TaskTag
	}
	return ""
}

func (x *GetTaskDetailResp) GetDone() int32 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *GetTaskDetailResp) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *GetTaskDetailResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetTaskDetailResp) GetRemindTime() string {
	if x != nil {
		return x.RemindTime
	}
	return ""
}

func (x *GetTaskDetailResp) GetPcode() string {
	if x != nil {
		return x.Pcode
	}
	return ""
}

func (x *GetTaskDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GetTaskDetailResp) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *GetTaskDetailResp) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *GetTaskDetailResp) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *GetTaskDetailResp) GetPrivate() int32 {
	if x != nil {
		return x.Private
	}
	return 0
}

func (x *GetTaskDetailResp) GetIdNum() int32 {
	if x != nil {
		return x.IdNum
	}
	return 0
}

func (x *GetTaskDetailResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetTaskDetailResp) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *GetTaskDetailResp) GetVersionCode() string {
	if x != nil {
		return x.VersionCode
	}
	return ""
}

func (x *GetTaskDetailResp) GetFeaturesCode() string {
	if x != nil {
		return x.FeaturesCode
	}
	return ""
}

func (x *GetTaskDetailResp) GetWorkTime() int32 {
	if x != nil {
		return x.WorkTime
	}
	return 0
}

func (x *GetTaskDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetTaskDetailResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetTaskDetailResp) GetCanRead() int32 {
	if x != nil {
		return x.CanRead
	}
	return 0
}

func (x *GetTaskDetailResp) GetExecutor() *ExecutorMessage {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *GetTaskDetailResp) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetTaskDetailResp) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *GetTaskDetailResp) GetPriText() string {
	if x != nil {
		return x.PriText
	}
	return ""
}

func (x *GetTaskDetailResp) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

var File_task_service_proto protoreflect.FileDescriptor

var file_task_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x64, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x09,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcc, 0x07, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x6f, 0x6e, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e,
	0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x99, 0x01, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x22, 0xd4, 0x07, 0x0a,
	0x0c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x50, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6e,
	0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x0e, 0x0a,
	0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8c, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9d, 0x0b, 0x0a,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6e, 0x65,
	0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6f,
	0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x4c, 0x69, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4f, 0x70, 0x65,
	0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xb1, 0x08, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x72,
	0x69, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x3c, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x54, 0x65, 0x78, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x65, 0x78, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x32, 0x97, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_task_service_proto_rawDescOnce sync.Once
	file_task_service_proto_rawDescData = file_task_service_proto_rawDesc
)

func file_task_service_proto_rawDescGZIP() []byte {
	file_task_service_proto_rawDescOnce.Do(func() {
		file_task_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_service_proto_rawDescData)
	})
	return file_task_service_proto_rawDescData
}

var file_task_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_task_service_proto_goTypes = []interface{}{
	(*GetTaskStagesReq)(nil),        // 0: task.service.v1.GetTaskStagesReq
	(*TaskStage)(nil),               // 1: task.service.v1.TaskStage
	(*GetTaskStagesResp)(nil),       // 2: task.service.v1.GetTaskStagesResp
	(*GetTasksByStageCodeReq)(nil),  // 3: task.service.v1.GetTasksByStageCodeReq
	(*Task)(nil),                    // 4: task.service.v1.Task
	(*ExecutorMessage)(nil),         // 5: task.service.v1.ExecutorMessage
	(*GetTasksByStageCodeResp)(nil), // 6: task.service.v1.GetTasksByStageCodeResp
	(*SaveTaskReq)(nil),             // 7: task.service.v1.SaveTaskReq
	(*SaveTaskResp)(nil),            // 8: task.service.v1.SaveTaskResp
	(*MoveTaskReq)(nil),             // 9: task.service.v1.MoveTaskReq
	(*MoveTaskResp)(nil),            // 10: task.service.v1.MoveTaskResp
	(*GetTaskListReq)(nil),          // 11: task.service.v1.GetTaskListReq
	(*TaskMessage)(nil),             // 12: task.service.v1.TaskMessage
	(*GetTaskListResp)(nil),         // 13: task.service.v1.GetTaskListResp
	(*GetTaskDetailReq)(nil),        // 14: task.service.v1.GetTaskDetailReq
	(*GetTaskDetailResp)(nil),       // 15: task.service.v1.GetTaskDetailResp
}
var file_task_service_proto_depIdxs = []int32{
	1,  // 0: task.service.v1.GetTaskStagesResp.list:type_name -> task.service.v1.TaskStage
	5,  // 1: task.service.v1.Task.executor:type_name -> task.service.v1.ExecutorMessage
	4,  // 2: task.service.v1.GetTasksByStageCodeResp.list:type_name -> task.service.v1.Task
	5,  // 3: task.service.v1.SaveTaskResp.executor:type_name -> task.service.v1.ExecutorMessage
	5,  // 4: task.service.v1.TaskMessage.executor:type_name -> task.service.v1.ExecutorMessage
	12, // 5: task.service.v1.GetTaskListResp.list:type_name -> task.service.v1.TaskMessage
	5,  // 6: task.service.v1.GetTaskDetailResp.executor:type_name -> task.service.v1.ExecutorMessage
	0,  // 7: task.service.v1.TaskService.GetTaskStages:input_type -> task.service.v1.GetTaskStagesReq
	3,  // 8: task.service.v1.TaskService.GetTasksByStageCode:input_type -> task.service.v1.GetTasksByStageCodeReq
	7,  // 9: task.service.v1.TaskService.SaveTask:input_type -> task.service.v1.SaveTaskReq
	9,  // 10: task.service.v1.TaskService.MoveTask:input_type -> task.service.v1.MoveTaskReq
	11, // 11: task.service.v1.TaskService.GetTaskList:input_type -> task.service.v1.GetTaskListReq
	14, // 12: task.service.v1.TaskService.GetTaskDetail:input_type -> task.service.v1.GetTaskDetailReq
	2,  // 13: task.service.v1.TaskService.GetTaskStages:output_type -> task.service.v1.GetTaskStagesResp
	6,  // 14: task.service.v1.TaskService.GetTasksByStageCode:output_type -> task.service.v1.GetTasksByStageCodeResp
	8,  // 15: task.service.v1.TaskService.SaveTask:output_type -> task.service.v1.SaveTaskResp
	10, // 16: task.service.v1.TaskService.MoveTask:output_type -> task.service.v1.MoveTaskResp
	13, // 17: task.service.v1.TaskService.GetTaskList:output_type -> task.service.v1.GetTaskListResp
	15, // 18: task.service.v1.TaskService.GetTaskDetail:output_type -> task.service.v1.GetTaskDetailResp
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_task_service_proto_init() }
func file_task_service_proto_init() {
	if File_task_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskStagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskStagesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksByStageCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksByStageCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_service_proto_goTypes,
		DependencyIndexes: file_task_service_proto_depIdxs,
		MessageInfos:      file_task_service_proto_msgTypes,
	}.Build()
	File_task_service_proto = out.File
	file_task_service_proto_rawDesc = nil
	file_task_service_proto_goTypes = nil
	file_task_service_proto_depIdxs = nil
}
