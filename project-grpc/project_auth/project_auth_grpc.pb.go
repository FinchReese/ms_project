// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: project_auth.proto

package project_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectAuthServiceClient is the client API for ProjectAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectAuthServiceClient interface {
	GetProjectAuthList(ctx context.Context, in *GetProjectAuthListReq, opts ...grpc.CallOption) (*GetProjectAuthListResp, error)
}

type projectAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectAuthServiceClient(cc grpc.ClientConnInterface) ProjectAuthServiceClient {
	return &projectAuthServiceClient{cc}
}

func (c *projectAuthServiceClient) GetProjectAuthList(ctx context.Context, in *GetProjectAuthListReq, opts ...grpc.CallOption) (*GetProjectAuthListResp, error) {
	out := new(GetProjectAuthListResp)
	err := c.cc.Invoke(ctx, "/project_auth.service.v1.ProjectAuthService/GetProjectAuthList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectAuthServiceServer is the server API for ProjectAuthService service.
// All implementations must embed UnimplementedProjectAuthServiceServer
// for forward compatibility
type ProjectAuthServiceServer interface {
	GetProjectAuthList(context.Context, *GetProjectAuthListReq) (*GetProjectAuthListResp, error)
	mustEmbedUnimplementedProjectAuthServiceServer()
}

// UnimplementedProjectAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectAuthServiceServer struct {
}

func (UnimplementedProjectAuthServiceServer) GetProjectAuthList(context.Context, *GetProjectAuthListReq) (*GetProjectAuthListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAuthList not implemented")
}
func (UnimplementedProjectAuthServiceServer) mustEmbedUnimplementedProjectAuthServiceServer() {}

// UnsafeProjectAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectAuthServiceServer will
// result in compilation errors.
type UnsafeProjectAuthServiceServer interface {
	mustEmbedUnimplementedProjectAuthServiceServer()
}

func RegisterProjectAuthServiceServer(s grpc.ServiceRegistrar, srv ProjectAuthServiceServer) {
	s.RegisterService(&ProjectAuthService_ServiceDesc, srv)
}

func _ProjectAuthService_GetProjectAuthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectAuthListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAuthServiceServer).GetProjectAuthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project_auth.service.v1.ProjectAuthService/GetProjectAuthList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAuthServiceServer).GetProjectAuthList(ctx, req.(*GetProjectAuthListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectAuthService_ServiceDesc is the grpc.ServiceDesc for ProjectAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project_auth.service.v1.ProjectAuthService",
	HandlerType: (*ProjectAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectAuthList",
			Handler:    _ProjectAuthService_GetProjectAuthList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project_auth.proto",
}
